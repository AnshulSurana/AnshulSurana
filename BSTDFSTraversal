class Node {
    constructor(val) {
        this.val = val;
        this.l = null;
        this.r = null;
    }
}

class BST {
    constructor(){
        this.root = null;
    }
    insert(val) {
        var newNode = new Node(val);
        if (!this.root) {
            this.root = newNode;
        } else {
            var curr = this.root;
            while(true) {
                if (curr.val === val) return false;
                if (curr.val > val){
                    if (curr.l) {
                        curr = curr.l;
                    } else {
                        curr.l = newNode;
                        return this;
                    }
                } else {
                    if (curr.r) {
                        curr = curr.r;
                    } else{
                        curr.r = newNode;
                        return this;
                    }
                }
            }
        }
    }
    find(val) {
        if (!this.root) {
            return false;
        } else {
            var curr = this.root;
            var found = false;
            while(curr && !found) {
                if (curr.val === val) ;
                if (curr.val > val) {
                        curr = curr.l;
                } else if (curr.val < val) {
                        curr = curr.r;
                } else {
                    found = true;
                }
            }
            if (!found) {
                return false;
            }
            return curr;
        }

    }
}

var tree = new BST();
tree.insert(10);
tree.insert(6);
tree.insert(3);
tree.insert(8);
tree.insert(15);
tree.insert(20);

function preOrder(tree) {
    var current = tree.root;
    var traRes = [];
    function traverse(current) {
        traRes.push(current.val);
        if (current.l) {
            traverse(current.l);
        }
        if (current.r){
            traverse(current.r);
        }
    }

    traverse(current);
    return traRes;
}

function postOrder(tree) {
    var current = tree.root;
    var traRes = [];
    function traverse(current) {
        if (current.l) {
            traverse(current.l);
        }
        if (current.r){
            traverse(current.r);
        }
        traRes.push(current.val);
    }
    traverse(current);
    return traRes;
}

function inOrder(tree) {
    var current = tree.root;
    var traRes = [];
    function traverse(current) {
        if (current.l) {
            traverse(current.l);
        }
        traRes.push(current.val);
        if (current.r){
            traverse(current.r);
        }
    }
    traverse(current);
    return traRes;
}

var a = preOrder(tree);
var b = postOrder(tree);
var c = inOrder(tree);
console.log(a);
console.log(b);
console.log(c);

