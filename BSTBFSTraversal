// create tree
class Node {
    constructor(val) {
        this.val = val;
        this.l = null;
        this.r = null;
    }
}

class BST {
    constructor(){
        this.root = null;
    }
    insert(val) {
        var newNode = new Node(val);
        if (!this.root) {
            this.root = newNode;
        } else {
            var curr = this.root;
            while(true) {
                if (curr.val === val) return false;
                if (curr.val > val){
                    if (curr.l) {
                        curr = curr.l;
                    } else {
                        curr.l = newNode;
                        return this;
                    }
                } else {
                    if (curr.r) {
                        curr = curr.r;
                    } else{
                        curr.r = newNode;
                        return this;
                    }
                }
            }
        }
    }
    find(val) {
        if (!this.root) {
            return false;
        } else {
            var curr = this.root;
            var found = false;
            while(curr && !found) {
                if (curr.val === val) ;
                if (curr.val > val) {
                        curr = curr.l;
                } else if (curr.val < val) {
                        curr = curr.r;
                } else {
                    found = true;
                }
            }
            if (!found) {
                return false;
            }
            return curr;
        }

    }
}

var tree = new BST();
tree.insert(10);
tree.insert(5);
tree.insert(13);
tree.insert(11);
tree.insert(2);
tree.insert(16);
tree.insert(7);

//traverse tree
function traverse(tree){
    var queue = [];
    var traRes = [];
    if (!tree.root) return undefined;
    queue.push(tree.root);
    while(queue.length > 0) {
        var curr = queue.shift();
        traRes.push(curr.val);
        if (curr.l) {
            queue.push(curr.l);
        }
        if (curr.r) {
            queue.push(curr.r);
        }
    }
    return traRes;
}


function traverseUsingLL(tree) {
    var queue = new singlyLinkedList();
    var traRes = [];
    if (!tree.root) return undefined;
    queue.push(tree.root);
    while(queue.length > 0) {
        var curr = queue.shift().val;
        traRes.push(curr.val);
        if (curr.l) {
            queue.push(curr.l);
        }
        if (curr.r) {
            queue.push(curr.r);
        }
    }
    return traRes;
}

console.log(traverse(tree));

//LinedList
class llNode {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
}

class singlyLinkedList {
    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    push(value) {
        let node = new llNode(value);
        if (!this.head) {
            this.head = node;
            this.tail = this.head;
        } else {
            this.tail.next = node;
            this.tail = node;
        }
         this.length++; 
         return this;
    }
    traverse() {
         let current = this.head;
         while(current.next != null) {
             current = current.next;
             console.log('vals: ', current.val);
         }
         return this;
    }

    pop() {
        if(!this.head) return undefined;
        let current = this.head;
        let prev = current;
        while(current.next != null) {
            prev = current;
            current = current.next;
        }
        prev.next = null;
        this.tail = prev;
        this.length--;
        if(this.length === 0) {
            this.tail = null;
            this.head = null;
        }
        return current;
    }

    shift(){
        if(!this.head) return undefined;
        var currentHead = this.head;
        this.head = currentHead.next;
        this.length--;
        if(this.length === 0) {
            this.tail = null;
        }
        return currentHead;
    }

    unshift(val) {
        var newHead = new llNode(val);
        if(!this.head) {
            this.head = newHead;
            this.tail = this.head;
        } else {
            newHead.next = this.head;
            this.head = newHead;
        }
        this.length++;
        return this;
    }
    // get with indices
    get(ind) {
        var current = this.head;
        var counter = 0;
        if (!this.head || ind < 0 || ind >= this.length) return undefined;
        while(ind < this.length && counter < ind) {
            current = current.next;
            counter++;
        }
        return current;
    }

    set(ind, val) {
        var current = this.get(ind);
        if (current) {
            current.val = val;
            return true;
        }
        return false;
    }

    insert(ind, val) {
        if (!this.head || ind < 0 || ind > this.length) {
            return false;
        }
        if (ind === this.length) return !!this.push(val);
        if (ind === 0) return !!this.unshift(val);
        var prev = this.get(ind - 1);
        var newNode = new llNode(val);
        newNode.next = prev.next;
        prev.next = newNode;
        this.length++;
        return true;
    }
    remove(ind) {
        if (!this.head || ind < 0 || ind > this.length) {
            return false;
        }
        if(ind === this.length - 1) return this.pop();
        if (ind === 0) return this.shift();
        var prevNode = this.get(ind - 1);
        var removed = prevNode.next;
        var nextNode = removed.next;
        prevNode.next = nextNode;
        this.length--;
        return true;
    }

    reverse() {
        if (this.length < 1) {
            return false;
        }
        var temp = this.head;
        this.head = this.tail;
        this.tail = temp;
        var next = temp.next;
        var prev = null;
        for(let i = 0; i < this.length; i++) {
            next = temp.next;
            temp.next = prev;
            prev = temp;
            temp = next;
        }
        return this;
    }

    print() {
        var arr = [];
        var current = this.head;
        while(current){
            arr.push(current.val);
            current = current.next;
        }
        console.log(arr);
    }
}
